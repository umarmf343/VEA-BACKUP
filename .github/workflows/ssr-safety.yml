name: SSR Safety and CI

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main

env:
  NODE_VERSION: '18'
  NEXT_TELEMETRY_DISABLED: '1'

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint:
    name: Lint & SSR Safety
    runs-on: ubuntu-latest
    env:
      CI: true
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with: &node_setup
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
          cache-dependency-path: package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint SSR Safety Check
        run: npm run lint -- --max-warnings=0

      - name: Run SSR Safety Script
        run: |
          chmod +x scripts/ssr-safety-check.sh
          ./scripts/ssr-safety-check.sh

  typecheck:
    name: Typecheck
    runs-on: ubuntu-latest
    env:
      CI: true
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with: *node_setup

      - name: Install dependencies
        run: npm ci

      - name: Run TypeScript Check
        run: npm run typecheck

  unit-tests:
    name: Unit Tests & Coverage
    runs-on: ubuntu-latest
    env:
      CI: true
      NODE_ENV: test
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with: *node_setup

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests with coverage
        run: npm test -- --coverage --runInBand --passWithNoTests

      - name: Upload coverage artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ github.run_id }}
          path: coverage
          if-no-files-found: warn
          retention-days: 7

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    env:
      CI: true
      NODE_ENV: test
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with: *node_setup

      - name: Install dependencies
        run: npm ci

      - name: Run integration tests
        run: npm run test:integration

  build:
    name: Build & Preview Artifact
    runs-on: ubuntu-latest
    needs:
      - lint
      - typecheck
      - unit-tests
      - integration-tests
    env:
      CI: true
      SKIP_ENV_VALIDATION: true
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with: *node_setup

      - name: Restore Prisma cache
        if: hashFiles('prisma/schema.prisma') != ''
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/prisma
            prisma/migrations
          key: ${{ runner.os }}-prisma-${{ hashFiles('prisma/schema.prisma') }}-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-prisma-${{ hashFiles('prisma/schema.prisma') }}-
            ${{ runner.os }}-prisma-

      - name: Restore Next.js build cache
        uses: actions/cache@v4
        with:
          path: .next/cache
          key: ${{ runner.os }}-next-${{ hashFiles('package-lock.json') }}-${{ github.ref_name }}
          restore-keys: |
            ${{ runner.os }}-next-${{ hashFiles('package-lock.json') }}-
            ${{ runner.os }}-next-

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma client
        if: hashFiles('prisma/schema.prisma') != ''
        run: npx prisma generate

      - name: Build Check
        run: npm run build

      - name: Upload Next.js build artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: next-build-${{ github.run_id }}
          path: |
            .next
            public
            package.json
            next.config.mjs
            package-lock.json
          if-no-files-found: error
          retention-days: 7

  dependency-audit:
    name: Dependency Audit (optional)
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request' || !github.event.pull_request.head.repo.fork
    continue-on-error: true
    env:
      CI: true
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with: *node_setup

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: npm audit --audit-level=high

  lighthouse:
    name: Lighthouse (optional)
    runs-on: ubuntu-latest
    needs: build
    if: ${{ vars.LIGHTHOUSE_URL != '' }}
    continue-on-error: true
    env:
      CI: true
    steps:
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with: *node_setup

      - name: Run Lighthouse CI
        run: npx @lhci/cli autorun --collect.url="${{ vars.LIGHTHOUSE_URL }}" --upload.target=temporary-public-storage
